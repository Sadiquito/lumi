
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

interface SessionData {
  id: string;
  transcript: any[];
  startTime: Date;
}

export const useSessionManagement = () => {
  const { user } = useAuth();
  const [currentSession, setCurrentSession] = useState<SessionData | null>(null);

  const startSession = useCallback(() => {
    const newSession: SessionData = {
      id: `session-${Date.now()}-${Math.random()}`,
      transcript: [],
      startTime: new Date()
    };
    setCurrentSession(newSession);
    console.log('Started new session:', newSession.id);
    return newSession;
  }, []);

  const addToTranscript = useCallback((speaker: 'user' | 'lumi', text: string) => {
    if (!currentSession) return;

    const entry = {
      speaker,
      text,
      timestamp: Date.now()
    };

    setCurrentSession(prev => prev ? {
      ...prev,
      transcript: [...prev.transcript, entry]
    } : null);
  }, [currentSession]);

  const endSession = useCallback(async () => {
    if (!currentSession || !user) return;

    try {
      console.log('Ending session with comprehensive analysis...');
      
      // Calculate session duration
      const duration = Math.floor((Date.now() - currentSession.startTime.getTime()) / 1000);

      // Save conversation to database
      const { data: conversation, error: saveError } = await supabase
        .from('conversations')
        .insert({
          user_id: user.id,
          transcript: currentSession.transcript,
          conversation_duration: duration,
          session_summary: null, // Will be generated by the analysis
          lumi_reflection: null,
          psychological_insights: {}
        })
        .select()
        .single();

      if (saveError) {
        console.error('Error saving conversation:', saveError);
        throw saveError;
      }

      // Trigger comprehensive session analysis
      if (currentSession.transcript.length > 0) {
        const lastUserMessage = currentSession.transcript
          .filter(entry => entry.speaker === 'user')
          .pop();

        if (lastUserMessage) {
          const { error: analysisError } = await supabase.functions.invoke('lumi-conversation', {
            body: {
              userTranscript: lastUserMessage.text,
              userId: user.id,
              conversationId: conversation.id,
              isSessionEnd: true // This triggers comprehensive analysis
            }
          });

          if (analysisError) {
            console.error('Error in session analysis:', analysisError);
          } else {
            console.log('Session analysis completed successfully');
          }
        }
      }

      setCurrentSession(null);
      console.log('Session ended and analyzed');

    } catch (error) {
      console.error('Error ending session:', error);
    }
  }, [currentSession, user]);

  return {
    currentSession,
    startSession,
    addToTranscript,
    endSession,
    isSessionActive: !!currentSession
  };
};
